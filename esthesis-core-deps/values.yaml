##################################################################################################
# Global values
##################################################################################################
devMode: true

domain: esthesis
keycloakHostname: "keycloak.esthesis"
kafkaTopicReplicas: 1
esthesisVersion: "3.0.59-SNAPSHOT"
esthesisLocalCharts: true
esthesisReportedOidcPostLogoutUrl: http://localhost:4200/logged-out
oidcRedirectUri: http://localhost:4200/callback
timezone: "Europe/Athens"
registryNodePort: 8080
ingressClassName:
imagePullSecret: ""

# Enable/disable charts
charts_enabled:
  kafka-ui: false
  orion: false
  docker-registry-ui: false
  grafana-tempo: false
  grafana-loki: false
  grafana: false
  ingress-nginx: false

##################################################################################################
# Accounts to be used throughout charts.
##################################################################################################
esthesisAdminUsername: esthesis-admin
esthesisAdminPassword: esthesis-admin
esthesisSystemUsername: esthesis-system
esthesisSystemPassword: esthesis-system

##################################################################################################
# Mosquitto Values
##################################################################################################

mosquittoEnabled: false
mosquittoServiceType: LoadBalancer
mosquittoMutualTls: false
mosquittoSuperuser: esthesis
mosquittoCaCert: ""
mosquittoServerCert: ""
mosquittoServerKey: ""

# Redis configuration
redis:
  fullnameOverride: "redis"
  image:
    pullSecrets: []
  architecture: standalone
  auth:
    password: esthesis-system

# MongoDB configuration
mongodb:
  fullnameOverride: "mongodb"
  image:
    pullSecrets: []
    debug: true
  architecture: replicaset
  replicaCount: 1
  auth:
    rootPassword: esthesis-system
    replicaSetKey: "ZXN0aGVzaXMtc3lzdGVt" # Base64 encoded string "esthesis-system"
    usernames:
      - "esthesis-system"
    passwords:
      - "esthesis-system"
    databases:
      - "esthesiscore"
  initdbScripts:
    init-db.js: |
      use esthesiscore
      db.grantRolesToUser("esthesis-system", ["dbAdmin"])

# Kafka configuration
kafka:
  fullnameOverride: "kafka"
  image:
    pullSecrets: []
  provisioning:
    enabled: true
    topics:
      - name: esthesis-command-reply
        partitions: 1
        replicationFactor: 1
      - name: esthesis-telemetry
        partitions: 1
        replicationFactor: 1
      - name: esthesis-metadata
        partitions: 1
        replicationFactor: 1
      - name: esthesis-app-unicast
        partitions: 1
        replicationFactor: 1
      - name: esthesis-app-broadcast
        partitions: 1
        replicationFactor: 1
      - name: esthesis-ping
        partitions: 1
        replicationFactor: 1
      - name: esthesis-command-request
        partitions: 1
        replicationFactor: 1
  kraft:
    clusterId: "M3Q1ZTNlMWFhMTgyNDhiZj"
  sasl:
    interbroker:
      password: "esthesis-system"
    controller:
      password: "esthesis-system"
    client:
      users:
        - "esthesis-system"
      passwords:
        - "esthesis-system"
  controller:
    replicaCount: 1
  extraConfig: |
    offsets.topic.replication.factor=3
    transaction.state.log.replication.factor=3

# Keycloak configuration
keycloak:
  fullnameOverride: "keycloak"
  global:
    imagePullSecrets: []
  proxyHeaders: xforwarded
  production: true
  auth:
    adminUser: esthesis-system
    adminPassword: esthesis-system
  postgresql:
    fullnameOverride: "postgresql"
    auth:
      postgresPassword: "esthesis-system"
      password: "esthesis-system"
  readinessProbe:
    timeoutSeconds: 60

# Camunda configuration
camunda-platform:
  global:
    zeebeClusterName: "zeebe"
    image:
      pullSecrets: []
    identity:
      keycloak:
        url:
          protocol: "http"
          host: "keycloak-headless"
          port: "8080"
      auth:
        enabled: false
  operate:
    enabled: false
  optimize:
    enabled: false
  tasklist:
    enabled: false
  identity:
    enabled: false
  identityKeycloak:
    enabled: false
  webModeler:
    enabled: false
  connectors:
    enabled: false
  zeebe:
    enabled: true
    resources:
      requests:
        cpu: "100m"
        memory: "256Mi"
    clusterSize: 1
    replicationFactor: 1
  zeebeGateway:
    enabled: true
    resources:
      requests:
        cpu: "100m"
        memory: "256Mi"
    replicas: 1
  elasticsearch:
    fullnameOverride: "elasticsearch"
    enabled: true
    resources:
      requests:
        cpu: "100m"
        memory: "256Mi"
    replicas: 1
    minimumMasterNodes: 1

# InfluxDB configuration
influxdb:
  fullnameOverride: "influxdb"
  global:
    imagePullSecrets: []
  auth:
    admin:
      username: esthesis-system
      password: esthesis-system
      token: "918UdZNzKNEf7YeL7efV"
    user:
      org: esthesis
      bucket: esthesis
      username: esthesis-system
      password: esthesis-system
  persistence:
    size: "32Gi"

# Grafana configuration
grafana:
  fullnameOverride: "grafana"
  global:
    imagePullSecrets: []
  admin:
    user: esthesis-system
    password: esthesis-system

# Kafka UI configuration
kafka-ui:
  fullnameOverride: "kafka-ui"
  imagePullSecrets: []
  yamlApplicationConfig:
    kafka:
      clusters:
        - name: kafka
          bootstrapServers: "kafka:9092"
          properties:
            security.protocol: SASL_PLAINTEXT
            sasl.mechanism: PLAIN
            sasl.jaas.config: "org.apache.kafka.common.security.scram.ScramLoginModule required username=esthesis-system password=esthesis-system;"

# Grafana Loki configuration
grafana-loki:
  fullnameOverride: "grafana-loki"
  global:
    imagePullSecrets: []
  promtail:
    enabled: true

# Ingress nginx configuration
ingress-nginx:
  fullnameOverride: "ingress-nginx"
  controller:
    scope:
      enabled: false
      namespace: default
    service:
      externalIPs:
        - "192.168.1.1"
      annotations:
        external-dns.alpha.kubernetes.io/hostname: "*.esthesis"
        service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
        service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
        service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "3600"
    ingressClassResource:
      name: "nginx-default"

# Docker Registry UI configuration
docker-registry-ui:
  fullnameOverride: "docker-registry-ui"
  global:
    name: docker-registry
    imagePullSecrets: []
  ui:
    proxy: true
    deleteImages: true
  registry:
    enabled: true
    service:
      type: NodePort
      nodePort: ""

# Grafana Tempo configuration
grafana-tempo:
  fullnameOverride: "grafana-tempo"
  global:
    imagePullSecrets: []
  tempo:
    traces:
      jaeger:
        grpc: false
        thriftHttp: false
      otlp:
        grpc: true # Needed by Quarkus (port 4317)
