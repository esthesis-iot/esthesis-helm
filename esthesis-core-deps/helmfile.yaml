##################################################################################################
# Environments definitions
##################################################################################################
environments:
  default:
    values:
      - devMode: false
      - domain: {{ env "DOMAIN" }}
      - esthesisLocalCharts: {{ if (env "ESTHESIS_LOCAL_CHARTS") }}{{ env "ESTHESIS_LOCAL_CHARTS" }}{{ else }}false{{ end }}
      - oidcRedirectUri: https://{{ env "ESTHESIS_HOSTNAME" }}/callback
  dev:
    values:
      - devMode: true
      - domain: esthesis
      - keycloakHostname: "keycloak.esthesis"
      - kafkaTopicReplicas: 1
      - esthesisLocalCharts: true
      - esthesisReportedOidcPostLogoutUrl: http://localhost:4200/logged-out
      - oidcRedirectUri: http://localhost:4200/callback

---
##################################################################################################
# The repositories used by this Helmfile.
##################################################################################################
repositories:
  - name: esthesis
    url: https://esthes.is/helm
  - name: bitnami
    url: registry-1.docker.io/bitnamicharts
    oci: true
  - name: camunda
    url: https://helm.camunda.io
  - name: kafka-ui
    url: https://provectus.github.io/kafka-ui-charts
  - name: joxit
    url: https://helm.joxit.dev
  - name: ingress-nginx
    url: https://kubernetes.github.io/ingress-nginx
  - name: fiware
    url: https://fiware.github.io/helm-charts

---
##################################################################################################
# Default values
##################################################################################################
helmDefaults:
  timeout: 1800

---
##################################################################################################
# Default state values
##################################################################################################
values:
  ##################################################################################################
  # Global values
  ##################################################################################################
  - esthesisVersion: "3.0.54-SNAPSHOT"
  - timezone: {{ env "TIMEZONE" | default "Europe/Athens" }}
  - imagePullSecret: {{ env "IMAGE_PULL_SECRET" }}
  - registryNodePort: {{ env "REGISTRY_NODE_PORT" }}
  - ingressClassName: {{ env "INGRESS_CLASS_NAME" }}

  ##################################################################################################
  # Accounts to be used throughout charts.
  ##################################################################################################
  - esthesisAdminUsername: {{ env "ESTHESIS_ADMIN_USERNAME" | default "esthesis-admin" }}
  - esthesisAdminPassword: {{ env "ESTHESIS_ADMIN_PASSWORD" | default "esthesis-admin" }}
  - esthesisSystemUsername: {{ env "ESTHESIS_SYSTEM_USERNAME" | default "esthesis-system" }}
  - esthesisSystemPassword: {{ env "ESTHESIS_SYSTEM_PASSWORD" | default "esthesis-system" }}

  ##################################################################################################
  # Chart-specific values.
  ##################################################################################################
  # Keycloak
  - keycloakEnabled: {{ env "KEYCLOAK_ENABLED" | default true }}
  - keycloakHostname: {{ env "KEYCLOAK_HOSTNAME" }}
  - keycloakCertManagerClusterIssuer: {{ env "KEYCLOAK_CERT_MANAGER_CLUSTER_ISSUER" }}
  - keycloakCertManagerIssuer: {{ env "KEYCLOAK_CERT_MANAGER_ISSUER" }}
  - keycloakStorageClass: {{ env "KEYCLOAK_STORAGE_CLASS" }}
  # MongoDB
  - mongoDbEnabled: {{ env "MONGODB_ENABLED" | default true }}
  - mongoDbStorageClass: {{ env "MONGODB_STORAGE_CLASS" }}
  # REDIS
  - redisEnabled: {{ env "REDIS_ENABLED" | default true }}
  # Kafka
  - kafkaEnabled: {{ env "KAFKA_ENABLED" | default true }}
  - kafkaTopicReplicas: {{ env "KAFKA_TOPIC_REPLICAS" | default 3 }}
  - kafkaTopicPartitions: {{ env "KAFKA_TOPIC_PARTITIONS" | default 3 }}
  # Kafka UI
  - kafkaUiEnabled: {{ env "KAFKA_UI_ENABLED" | default false }}
  # Camunda
  - camundaEnabled: {{ env "CAMUNDA_ENABLED" | default true }}
  # Orion LD
  - orionLdEnabled: {{ env "ORION_LD_ENABLED" | default false }}
  # Mosquitto
  - mosquittoEnabled: {{ env "MOSQUITTO_ENABLED" | default true }}
  - mosquittoMutualTls: {{ env "MOSQUITTO_MUTUAL_TLS" | default false }}
  - mosquittoSuperuser: {{ env "MOSQUITTO_SUPERUSER" | default "esthesis" }}
  - mosquittoCaCert: {{ env "MOSQUITTO_CA_CERT" }}
  - mosquittoServerCert: {{ env "MOSQUITTO_SERVER_CERT" }}
  - mosquittoServerKey: {{ env "MOSQUITTO_SERVER_KEY" }}
  - mosquittoServiceType: {{ env "MOSQUITTO_SERVICE_TYPE" | default "ClusterIP" }}
  # InfluxDB
  - influxDbEnabled: {{ env "INFLUXDB_ENABLED" | default true }}
  - influxDbSize: {{ env "INFLUXDB_SIZE" | default "32Gi" }}
  # Ingress nginx
  - ingressNginxLoadBalancerIP: {{ env "INGRESS_NGINX_LOAD_BALANCER_IP" }}
  - ingressNginxEnabled: {{ env "INGRESS_NGINX_ENABLED" | default false }}
  - ingressNginxCustomSSL: {{ env "INGRESS_NGINX_CUSTOM_SSL" }}
  - ingressNginxSSLCertArn: {{ env "INGRESS_NGINX_SSL_CERT_ARN" | default "" }}
  # Grafana
  - grafanaEnabled: {{ env "GRAFANA_ENABLED" | default false }}
  # Grafana Loki
  - grafanaLokiEnabled: {{ env "GRAFANA_LOKI_ENABLED" | default false }}
  # Grafana Tempo
  - grafanaTempoEnabled: {{ env "GRAFANA_TEMPO_ENABLED" | default false }}
  # Docker Registry
  - registryEnabled: {{ env "REGISTRY_ENABLED" | default false }}

---
##################################################################################################
# Release definitions
##################################################################################################
releases:
  - name: esthesis-core-deps
    chart: {{ or .StateValues.devMode .StateValues.esthesisLocalCharts | ternary "./" "esthesis/esthesis-core-deps" | quote }}
    version: {{ .StateValues.esthesisVersion | quote }}
    values:
      - devMode: {{ .StateValues.devMode }}
      - esthesisAdminUsername: {{ .StateValues.esthesisAdminUsername | quote }}
      - esthesisAdminPassword: {{ .StateValues.esthesisAdminPassword | quote }}
      - esthesisSystemUsername: {{ .StateValues.esthesisSystemUsername | quote }}
      - esthesisSystemPassword: {{ .StateValues.esthesisSystemPassword | quote }}
      # Keycloak
      - keycloakEnabled: {{ .StateValues.keycloakEnabled }}
      - keycloakFrontendUrl: {{ .StateValues.devMode | ternary "http://" "https://"}}{{ .StateValues.keycloakHostname }}
      - oidcRedirectUri: {{ .StateValues.oidcRedirectUri }}
      # Mosquitto
      - mosquittoEnabled: {{ .StateValues.mosquittoEnabled }}
      - mosquittoMutualTls: {{ .StateValues.mosquittoMutualTls }}
      - mosquittoSuperuser: {{ .StateValues.mosquittoSuperuser | quote }}
      - mosquittoCaCert: {{ .StateValues.mosquittoCaCert | quote }}
      - mosquittoServerCert: {{ .StateValues.mosquittoServerCert | quote }}
      - mosquittoServerKey: {{ .StateValues.mosquittoServerKey | quote }}
      - mosquittoServiceType: {{ .StateValues.mosquittoServiceType | quote }}
      - imagePullSecret: {{ .StateValues.imagePullSecret | quote }}
      # Grafana
      - grafanaEnabled: {{ .StateValues.grafanaEnabled }}
      # Grafana Loki
      - grafanaLokiEnabled: {{ .StateValues.grafanaLokiEnabled }}

  - name: redis
    chart: bitnami/redis
    version: "17.3.7"
    installed: {{ .StateValues.redisEnabled }}
    values:
      {{- if .StateValues.imagePullSecret }}
      - global:
          imagePullSecrets:
            - {{ .StateValues.imagePullSecret | quote }}
      {{- end }}
      - architecture: standalone
      - auth:
          password: {{ .StateValues.esthesisSystemPassword }}

  - name: mongodb
    chart: bitnami/mongodb
    version: "14.5.1"
    installed: {{ .StateValues.mongoDbEnabled }}
    values:
      {{- if or .StateValues.imagePullSecret .StateValues.mongoDbStorageClass }}
      - global:
          {{- if .StateValues.imagePullSecret }}
          imagePullSecrets:
            - {{ .StateValues.imagePullSecret | quote }}
          {{- end }}
          {{- if .StateValues.mongoDbStorageClass }}
          storageClass: {{ .StateValues.mongoDbStorageClass | quote }}
          {{- end }}
      {{- end }}
      - architecture: replicaset
      - auth:
          rootPassword: {{ .StateValues.esthesisSystemPassword }}
          replicaSetKey: {{ .StateValues.esthesisSystemPassword | b64enc | quote}}
          usernames:
            - {{ .StateValues.esthesisSystemUsername | quote }}
          passwords:
            - {{ .StateValues.esthesisSystemPassword | quote }}
          databases:
            - "esthesiscore"
      - initdbScripts:
          init-db.js: |
            use esthesiscore
            db.grantRolesToUser('{{ .StateValues.esthesisSystemUsername }}', ["dbAdmin"])
      {{- if .StateValues.devMode }}
      - replicaCount: 1
      {{- end }}

  - name: kafka
    chart: bitnami/kafka
    version: "26.6.2"
    installed: {{ .StateValues.kafkaEnabled }}
    values:
      {{- if .StateValues.imagePullSecret }}
      - global:
          imagePullSecrets:
            - {{ .StateValues.imagePullSecret | quote }}
      {{- end }}
      {{- if .StateValues.devMode }}
      - controller:
          replicaCount: 1
      {{- end }}
      - kraft:
          clusterId: "M3Q1ZTNlMWFhMTgyNDhiZj"
      - sasl:
          interbroker:
            password: {{ .StateValues.esthesisSystemPassword | quote }}
          controller:
            password: {{ .StateValues.esthesisSystemPassword | quote }}
          client:
            users:
              - {{ .StateValues.esthesisSystemUsername | quote }}
            passwords:
              - {{ .StateValues.esthesisSystemPassword | quote }}
      - provisioning:
          enabled: true
          topics:
            - name: esthesis-command-reply
              partitions: {{ .StateValues.kafkaTopicPartitions }}
              replicationFactor: {{ .StateValues.kafkaTopicReplicas }}
            - name: esthesis-telemetry
              partitions: {{ .StateValues.kafkaTopicPartitions }}
              replicationFactor: {{ .StateValues.kafkaTopicReplicas }}
            - name: esthesis-metadata
              partitions: {{ .StateValues.kafkaTopicPartitions }}
              replicationFactor: {{ .StateValues.kafkaTopicReplicas }}
            - name: esthesis-app
              partitions: {{ .StateValues.kafkaTopicPartitions }}
              replicationFactor: {{ .StateValues.kafkaTopicReplicas }}
            - name: esthesis-ping
              partitions: {{ .StateValues.kafkaTopicPartitions }}
              replicationFactor: {{ .StateValues.kafkaTopicReplicas }}
            - name: esthesis-command-request
              partitions: {{ .StateValues.kafkaTopicPartitions }}
              replicationFactor: {{ .StateValues.kafkaTopicReplicas }}
      - extraConfig: |
          offsets.topic.replication.factor={{ .StateValues.kafkaTopicReplicas }}
          transaction.state.log.replication.factor={{ .StateValues.kafkaTopicReplicas }}

  - name: kafka-ui
    chart: "kafka-ui/kafka-ui"
    version: "0.7.5"
    installed: {{ .StateValues.kafkaUiEnabled }}
    values:
      {{- if .StateValues.imagePullSecret }}
      - imagePullSecrets:
          - name: {{ .StateValues.imagePullSecret | quote }}
      {{- end }}
      - yamlApplicationConfig:
          kafka:
            clusters:
              - name: kafka
                bootstrapServers: "kafka.{{ .Namespace }}.svc.cluster.local:9092"
                properties:
                  security.protocol: SASL_PLAINTEXT
                  sasl.mechanism: PLAIN
                  sasl.jaas.config: "org.apache.kafka.common.security.scram.ScramLoginModule required username={{ .StateValues.esthesisSystemUsername }} password={{ .StateValues.esthesisSystemPassword }};"
      - management:
          health:
            ldap:
              enabled: false

  - name: camunda
    chart: "camunda/camunda-platform"
    version: "8.1.5"
    installed: {{ .StateValues.camundaEnabled }}
    values:
      {{- if .StateValues.imagePullSecret }}
      - global:
          image:
            pullSecrets:
              - name: {{ .StateValues.imagePullSecret | quote }}
      {{- end }}
      - operate:
          enabled: false
      - optimize:
          enabled: false
      - tasklist:
          enabled: false
      - identity:
          enabled: false
      - web-modeler:
          enabled: false
      - zeebe:
          resources:
            requests:
              cpu: "100m"
              memory: "256Mi"
          {{- if .StateValues.devMode }}
          clusterSize: 1
          replicationFactor: 1
          {{- end }}
      - zeebe-gateway:
          resources:
            requests:
              cpu: "100m"
              memory: "256Mi"
          {{- if .StateValues.devMode }}
          replicas: 1
          {{- end }}
      - elasticsearch:
          resources:
            requests:
              cpu: "100m"
              memory: "256Mi"
          {{- if .StateValues.devMode }}
          replicas: 1
          minimumMasterNodes: 1
          {{- end }}

  - name: keycloak
    chart: bitnami/keycloak
    version: "22.0.0"
    installed: {{ .StateValues.keycloakEnabled }}
    values:
      {{- if or .StateValues.imagePullSecret .StateValues.keycloakStorageClass }}
      - global:
          {{- if .StateValues.imagePullSecret }}
          imagePullSecrets:
            - {{ .StateValues.imagePullSecret | quote }}
          {{- end }}
          {{- if .StateValues.keycloakStorageClass }}
          defaultStorageClass: {{ .StateValues.keycloakStorageClass | quote }}
          {{- end }}
      {{- end }}
      - proxyHeaders: xforwarded
      - production: true
      - auth:
          adminUser: {{ .StateValues.esthesisSystemUsername | quote }}
          adminPassword: {{ .StateValues.esthesisSystemPassword | quote }}
      - postgresql:
          auth:
            postgresPassword: {{ .StateValues.esthesisSystemPassword | quote }}
            password: {{ .StateValues.esthesisSystemPassword |quote }}
      - readinessProbe:
          timeoutSeconds: 60
      {{- if not .StateValues.devMode }}
      - ingress:
          enabled: true
          hostname: {{ .StateValues.keycloakHostname | quote }}
          ingressClassName: {{ .StateValues.ingressClassName | quote }}
          path: /
          {{- if or .StateValues.keycloakCertManagerClusterIssuer .StateValues.keycloakCertManagerIssuer }}
          tls: true
          {{- end }}
          annotations:
            # Do not create a DNS record (if external-dns is used), unless the resource is annotated.
            external-dns.alpha.kubernetes.io/ingress-hostname-source: annotation-only
            {{- if .StateValues.keycloakCertManagerClusterIssuer }}
            cert-manager.io/cluster-issuer: {{ .StateValues.keycloakCertManagerClusterIssuer | quote }}
            {{- end }}
            {{- if .StateValues.keycloakCertManagerIssuer }}
            cert-manager.io/issuer: {{ .StateValues.keycloakCertManagerIssuer | quote }}
            {{- end }}
      {{- end }}
      - extraEnvVars:
          {{- if not .StateValues.devMode }}
          # Allow admin service to be port-forwarded to localhost.
          - name: KC_HOSTNAME
            value: https://{{ .StateValues.keycloakHostname }}/
          - name: KC_HOSTNAME_ADMIN
            value: https://{{ .StateValues.keycloakHostname }}/
          {{- end }}

  - name: grafana-loki
    chart: bitnami/grafana-loki
    version: "2.11.16"
    installed: {{ .StateValues.grafanaLokiEnabled }}
    values:
      {{- if .StateValues.imagePullSecret }}
      - global:
          imagePullSecrets:
            - {{ .StateValues.imagePullSecret | quote }}
      {{- end }}
      - promtail:
          enabled: true
          existingSecret: "grafana-loki-config"

  - name: grafana
    chart: bitnami/grafana
    version: "9.6.3"
    installed: {{ .StateValues.grafanaEnabled }}
    values:
      {{- if .StateValues.imagePullSecret }}
      - global:
          imagePullSecrets:
            - {{ .StateValues.imagePullSecret | quote }}
      {{- end }}
      - admin:
          user: {{ .StateValues.esthesisSystemUsername | quote }}
          password: {{ .StateValues.esthesisSystemPassword | quote }}
      - datasources:
          secretName: grafana-config

  - name: grafana-tempo
    chart: bitnami/grafana-tempo
    version: "2.5.7"
    installed: {{ .StateValues.grafanaTempoEnabled }}
    values:
      {{- if .StateValues.imagePullSecret }}
      - global:
          imagePullSecrets:
            - {{ .StateValues.imagePullSecret | quote }}
      {{- end }}
      - tempo:
          traces:
            jaeger:
              grpc: false
              thriftHttp: false
            otlp:
              grpc: true  # Needed by Quarkus (port 4317)

  - name: influxdb
    chart: bitnami/influxdb
    version: "5.6.1"
    installed: {{ .StateValues.influxDbEnabled }}
    values:
      {{- if .StateValues.imagePullSecret }}
      - global:
          imagePullSecrets:
            - {{ .StateValues.imagePullSecret | quote }}
      {{- end }}
      - auth:
          createUserToken: true
          admin:
            username: {{ .StateValues.esthesisSystemUsername }}
            password: {{ .StateValues.esthesisSystemPassword }}
            token: {{ .StateValues.esthesisSystemPassword }}
          user:
            org: esthesis
            bucket: esthesis
            username: {{ .StateValues.esthesisSystemUsername | quote }}
            password: {{ .StateValues.esthesisSystemPassword | quote }}
      - persistence:
          size: {{ .StateValues.influxDbSize | quote }}

  - name: docker-registry
    chart: joxit/docker-registry-ui
    version: "1.1.3"
    installed: {{ .StateValues.registryEnabled }}
    values:
      - global:
          name: docker-registry
          {{- if .StateValues.imagePullSecret }}
          imagePullSecrets:
            - name: {{ .StateValues.imagePullSecret | quote }}
          {{- end }}
      - ui:
          proxy: true
          deleteImages: true
      - registry:
          enabled: true
          service:
            type: NodePort
            {{- if .StateValues.registryNodePort }}
            nodePort: {{ .StateValues.registryNodePort }}
            {{- end }}

  - name: ingress-nginx
    chart: ingress-nginx/ingress-nginx
    version: "4.9.1"
    installed: {{ .StateValues.ingressNginxEnabled }}
    values:
      - nameOverride: "{{ .Namespace }}"
      - controller:
          scope:
            enabled: true
            namespace: {{ .Namespace }}
          service:
            {{- if .StateValues.ingressNginxLoadBalancerIP }}
            externalIPs: 
              - {{ .StateValues.ingressNginxLoadBalancerIP }}
            {{- end }}
            annotations:
              external-dns.alpha.kubernetes.io/hostname: "*.{{ .StateValues.domain }}"
              service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
              service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
              service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: '3600'
              service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "{{ .StateValues.ingressNginxSSLCertArn }}"
            {{- if not .StateValues.ingressNginxCustomSSL }}
            enableHttp: false
            targetPorts:
              https: http
            {{- end}}
          ingressClassResource:
            name: "nginx-{{ .Namespace }}"
          {{- if .StateValues.ingressNginxCustomSSL }}
          extraArgs:
              default-ssl-certificate: "{{ .Namespace }}/{{ .StateValues.ingressNginxCustomSSL }}"
          {{- end }}

  - name: orionld
    chart: fiware/orion
    version: "1.3.0"
    installed: {{ .StateValues.orionLdEnabled }}
